import tomllib
import os

badges = {
    "C++": r"https://img.shields.io/badge/c++-%2300599C.svg?style=for-the-badge&logo=c%2B%2B&logoColor=white",
    "Java": r"https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white",
    "Python": r"https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54",
    "JavaScript": r"https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E"
}


def getBadge(name):
    return f'![{name}]({badges[name]})'


def main():
    with open("README.md", mode='w') as readme:
        readme.write("<!-- AUTOGENERATED -->\n")

        with open("header.md") as header:
            for line in header:
                readme.write(line)

        readme.write("\n<br>\n"
                     "<h2>My Projects</h2>\n"
                     "<table>\n")

        with open("projects.toml", mode='rb') as projectsF:
            projects = tomllib.load(projectsF)['projects']

        for name in projects:
            projectDescFile = os.path.join('projects', name + ".toml")
            with open(projectDescFile, mode='rb') as projectF:
                project = tomllib.load(projectF)

            lines = [
                "<tr><td>",
                "",
                f"### [{project['name']}]({project['url']})",
                "",
            ]

            badges = [getBadge(lang) for lang in project['langs']]
            try:
                badges.extend(project['otherBadges'])
            except KeyError:
                pass
            lines.append("".join(badges))

            lines.append("")
            lines.append(project['desc'])
            lines.append("</td><td>")
            if len(project["logo"]) > 0:
                lines.append(f'<image src="{project["logo"]}" width="200" align="center"/>')
            lines.append("</td></tr>")

            lines.append("</tr>")
            readme.write("\n".join(lines))

        readme.write("</table>\n\n---\n")
        with open("footer.md", mode='r') as footerF:
            for line in footerF:
                readme.write(line)

        readme.write("\n")


if __name__ == '__main__':
    main()
